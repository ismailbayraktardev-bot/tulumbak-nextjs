-- Add Guest Cart Support to Carts Table
-- This migration adds support for guest carts with expiration and session management

-- Add guest cart columns
ALTER TABLE carts
ADD COLUMN IF NOT EXISTS guest_cart_id VARCHAR(36) UNIQUE,
ADD COLUMN IF NOT EXISTS expires_at TIMESTAMPTZ,
ADD COLUMN IF NOT EXISTS session_token VARCHAR(255);

-- Create indexes for guest cart support (only after columns are added)
CREATE INDEX IF NOT EXISTS idx_carts_guest_cart_id ON carts(guest_cart_id);
CREATE INDEX IF NOT EXISTS idx_carts_expires_at ON carts(expires_at);
CREATE INDEX IF NOT EXISTS idx_carts_session_token ON carts(session_token);

-- Create a composite index for active guest carts
CREATE INDEX IF NOT EXISTS idx_carts_active_guest ON carts(guest_cart_id, status)
WHERE guest_cart_id IS NOT NULL AND status = 'active' AND expires_at > NOW();

-- Add constraint to ensure at least one identifier exists
ALTER TABLE carts
ADD CONSTRAINT check_cart_identifier
CHECK (
  (user_id IS NOT NULL) OR
  (session_id IS NOT NULL) OR
  (guest_cart_id IS NOT NULL)
);

-- Add constraint for guest cart expiration
ALTER TABLE carts
ADD CONSTRAINT check_guest_cart_expires
CHECK (
  guest_cart_id IS NULL OR
  expires_at IS NOT NULL
);

-- Create a function to generate guest cart IDs
CREATE OR REPLACE FUNCTION generate_guest_cart_id()
RETURNS VARCHAR(36) AS $$
BEGIN
  RETURN 'guest_' || EXTRACT(EPOCH FROM NOW())::BIGINT || '_' || substr(md5(random()::TEXT), 1, 8);
END;
$$ LANGUAGE plpgsql;

-- Create a function to clean up expired guest carts
CREATE OR REPLACE FUNCTION cleanup_expired_guest_carts()
RETURNS INTEGER AS $$
DECLARE
  deleted_count INTEGER;
BEGIN
  -- First delete items from expired carts
  DELETE FROM cart_items
  WHERE cart_id IN (
    SELECT id FROM carts
    WHERE guest_cart_id IS NOT NULL
    AND expires_at < NOW()
  );

  GET DIAGNOSTICS deleted_count = ROW_COUNT;

  -- Then delete the expired carts
  DELETE FROM carts
  WHERE guest_cart_id IS NOT NULL
  AND expires_at < NOW();

  RETURN deleted_count + ROW_COUNT;
END;
$$ LANGUAGE plpgsql;

-- Create a function to extend guest cart expiration
CREATE OR REPLACE FUNCTION extend_guest_cart_expiration(
  cart_guest_id VARCHAR(36),
  hours_to_extend INTEGER DEFAULT 24
)
RETURNS BOOLEAN AS $$
DECLARE
  updated_count INTEGER;
BEGIN
  UPDATE carts
  SET expires_at = NOW() + (hours_to_extend || ' hours')::INTERVAL,
      updated_at = NOW()
  WHERE guest_cart_id = cart_guest_id
  AND expires_at > NOW(); -- Only extend if not already expired

  GET DIAGNOSTICS updated_count = ROW_COUNT;
  RETURN updated_count > 0;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically set expires_at when guest_cart_id is set
CREATE OR REPLACE FUNCTION set_guest_cart_expiration()
RETURNS TRIGGER AS $$
BEGIN
  -- If guest_cart_id is being set and expires_at is not set, set default expiration
  IF NEW.guest_cart_id IS NOT NULL AND NEW.expires_at IS NULL THEN
    NEW.expires_at = NOW() + INTERVAL '24 hours';
  END IF;

  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Apply the trigger
CREATE TRIGGER trigger_set_guest_cart_expiration
  BEFORE INSERT OR UPDATE ON carts
  FOR EACH ROW
  EXECUTE FUNCTION set_guest_cart_expiration();

-- Grant necessary permissions (adjust as needed for your security model)
-- GRANT EXECUTE ON FUNCTION generate_guest_cart_id() TO PUBLIC;
-- GRANT EXECUTE ON FUNCTION cleanup_expired_guest_carts() TO api_user;
-- GRANT EXECUTE ON FUNCTION extend_guest_cart_expiration(VARCHAR, INTEGER) TO api_user;

-- Create a scheduled job to run cleanup (if using pg_cron extension)
-- SELECT cron.schedule('cleanup-expired-guest-carts', '0 */2 * * *', 'SELECT cleanup_expired_guest_carts();');

COMMENT ON COLUMN carts.guest_cart_id IS 'Unique identifier for guest carts, generated by generate_guest_cart_id()';
COMMENT ON COLUMN carts.expires_at IS 'Expiration time for guest carts. NULL for user carts';
COMMENT ON COLUMN carts.session_token IS 'Additional session identifier for guest cart tracking';
COMMENT ON FUNCTION generate_guest_cart_id() IS 'Generates a unique guest cart identifier with timestamp and random component';
COMMENT ON FUNCTION cleanup_expired_guest_carts() IS 'Removes expired guest carts and their items. Returns total rows deleted';
COMMENT ON FUNCTION extend_guest_cart_expiration() IS 'Extends expiration time for a guest cart. Returns true if successful';